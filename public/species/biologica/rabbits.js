// Generated by CoffeeScript 1.12.5
(function() {
  var hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  require.register("species/biologica/rabbits", function(exports, require, module) {
    BioLogica.Genetics.prototype.getRandomAllele = function(exampleOfGene) {
      var _allelesOfGene, _weightsOfGene, allelesOfGene, curMax, gene, i, j, len, rand, ref, totWeights, weight;
      ref = this.species.geneList;
      for (gene in ref) {
        if (!hasProp.call(ref, gene)) continue;
        _allelesOfGene = this.species.geneList[gene].alleles;
        _weightsOfGene = this.species.geneList[gene].weights || [];
        if (indexOf.call(_allelesOfGene, exampleOfGene) >= 0) {
          allelesOfGene = _allelesOfGene;
          break;
        }
      }
      if (_weightsOfGene.length) {
        while (_weightsOfGene.length < allelesOfGene.length) {
          _weightsOfGene[_weightsOfGene.length] = 0;
        }
      } else {
        while (_weightsOfGene.length < allelesOfGene.length) {
          _weightsOfGene[_weightsOfGene.length] = 1;
        }
      }
      totWeights = _weightsOfGene.reduce((function(prev, cur) {
        return prev + cur;
      }), 0);
      rand = Math.random() * totWeights;
      curMax = 0;
      for (i = j = 0, len = _weightsOfGene.length; j < len; i = ++j) {
        weight = _weightsOfGene[i];
        curMax += weight;
        if (rand <= curMax) {
          return allelesOfGene[i];
        }
      }
      if (console.error != null) {
        console.error('somehow did not pick one: ' + allelesOfGene[0]);
      }
      return allelesOfGene[0];
    };
    return module.exports = {
      name: 'Rabbit',
      chromosomeNames: ['1', '2', 'XY'],
      chromosomeGeneMap: {
        '1': ['B'],
        '2': [],
        'XY': []
      },
      chromosomesLength: {
        '1': 100000000,
        '2': 100000000,
        'XY': 70000000
      },
      geneList: {
        'color': {
          alleles: ['B', 'b'],
          weights: [.5, .5],
          start: 10000000,
          length: 10584
        }
      },
      alleleLabelMap: {
        'B': 'Brown',
        'b': 'White',
        '': ''
      },
      traitRules: {
        'color': {
          'white': [['b', 'b']],
          'brown': [['B', 'b'], ['B', 'B']]
        }
      },

      /*
        Images are handled via the populations.js species
       */
      getImageName: function(org) {
        return void 0;
      },

      /*
        no lethal characteristics
       */
      makeAlive: function(org) {
        return void 0;
      }
    };
  });

}).call(this);
