// Generated by CoffeeScript 1.12.5
(function() {
  var helpers;

  helpers = require('helpers');

  window.onload = function() {
    var authorControl, colorControl, colorControls, env1, env2, forceCheck, genotypeControl, params, percentBrown, setColors, setControlType, setEnvs, setPopControl, setSwitch, showSwitch, updateUrl, userControl;
    params = {};
    env1 = document.getElementById("env-1");
    env2 = document.getElementById("env-2");
    showSwitch = document.getElementById("switch");
    authorControl = document.getElementById("author-control");
    userControl = document.getElementById("user-control");
    colorControl = document.getElementById("color-control");
    genotypeControl = document.getElementById("genotype-control");
    colorControls = document.getElementById("color-controls");
    percentBrown = document.getElementById("percent-brown");
    updateUrl = function() {
      var i, key, len, ref, strParams, url;
      url = "https://concord-consortium.github.io/connected-bio-populations/hawk-rabbit-combo.html?";
      strParams = [];
      ref = Object.keys(params);
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        strParams.push(key + "=" + params[key]);
      }
      url = url + strParams.join("&");
      return document.getElementById("url").value = url;
    };
    forceCheck = function(elem, check) {
      elem.checked = check;
      return elem.onchange();
    };
    setEnvs = function() {
      var envs;
      envs = env1.value;
      if (env2.value === "none") {
        showSwitch.disabled = false;
      } else {
        envs += "," + env2.value;
        forceCheck(showSwitch, false);
        showSwitch.disabled = true;
      }
      params["envs"] = envs;
      return updateUrl();
    };
    env1.onchange = setEnvs;
    env2.onchange = setEnvs;
    setSwitch = function() {
      params["switch"] = showSwitch.checked;
      return updateUrl();
    };
    showSwitch.onchange = setSwitch;
    setPopControl = function(e) {
      params["popControl"] = e.target.value;
      return updateUrl();
    };
    authorControl.onchange = setPopControl;
    userControl.onchange = setPopControl;
    setControlType = function(e) {
      params["controlType"] = e.target.value;
      return updateUrl();
    };
    colorControl.onchange = setControlType;
    genotypeControl.onchange = setControlType;
    setColors = function(e) {
      return params["percentBrown"] = e.target.value;
    };
    percentBrown.onchange = setColors;
    return updateUrl();
  };

}).call(this);
