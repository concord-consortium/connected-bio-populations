// Generated by CoffeeScript 1.12.5
(function() {
  var Environment, Rule, col, env, i, j, ref, ref1, row, water;

  Environment = require('models/environment');

  Rule = require('models/rule');

  env = new Environment({
    columns: 52,
    rows: 58,
    imgPath: "images/environments/water5levels.png",
    barriers: [[0, 0, 520, 35], [0, 465, 520, 115], [0, 35, 18, 430], [100, 35, 18, 430], [200, 35, 18, 430], [300, 35, 18, 430], [400, 35, 18, 430], [500, 35, 20, 430]],
    wrapEastWest: true,
    wrapNorthSouth: true
  });

  for (col = i = 0, ref = env.columns; 0 <= ref ? i <= ref : i >= ref; col = 0 <= ref ? ++i : --i) {
    for (row = j = 0, ref1 = env.rows; 0 <= ref1 ? j <= ref1 : j >= ref1; row = 0 <= ref1 ? ++j : --j) {
      water = (function() {
        switch (false) {
          case !(col < 13):
            return 0.1;
          case !(col < 22):
            return 0.25;
          case !(col < 32):
            return 0.5;
          case !(col < 41):
            return 0.75;
          default:
            return 1;
        }
      })();
      env.set(col, row, "water", water);
    }
  }

  env.addRule(new Rule({
    test: function(agent) {
      return agent.get('age') > (agent.species.defs.SPROUT_AGE + 4);
    },
    action: function(agent) {
      var diff, health, size;
      size = agent.get('root size');
      water = agent.get('water');
      diff = Math.abs(size - (water * 10));
      health = 1 - (diff / 20);
      return agent.set('health', health);
    }
  }));

  env.addRule(new Rule({
    action: function(agent) {
      var immortal;
      immortal = agent.get('age') < (agent.species.defs.SPROUT_AGE + 10) || agent.get('health') >= 0.87;
      return agent.set('is immortal', immortal);
    }
  }));

  env.addRule(new Rule({
    action: function(agent) {
      var flowers;
      flowers = agent.get('age') > agent.species.defs.MATURITY_AGE && agent.get('health') >= 0.95;
      return agent.set('has flowers', flowers);
    }
  }));

  require.register("environments/water-flowerboxes", function(exports, require, module) {
    return module.exports = env;
  });

}).call(this);
