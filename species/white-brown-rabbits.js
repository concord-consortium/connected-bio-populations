// Generated by CoffeeScript 1.12.7
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  require.register("species/white-brown-rabbits", function(exports, require, module) {
    var BasicAnimal, Rabbit, Species, Trait, biologicaSpecies;
    Species = require('models/species');
    BasicAnimal = require('models/agents/basic-animal');
    Trait = require('models/trait');
    biologicaSpecies = require('species/biologica/rabbits');
    Rabbit = (function(superClass) {
      extend(Rabbit, superClass);

      function Rabbit() {
        return Rabbit.__super__.constructor.apply(this, arguments);
      }

      Rabbit.prototype.label = 'Mouse';

      Rabbit.prototype.moving = false;

      Rabbit.prototype.step = function() {
        this._closestAgents = null;
        this._setSpeedAppropriateForAge();
        this._depleteEnergy();
        if (this.get('age') > this.species.defs.MATURITY_AGE && Math.random() < this.get('mating chance')) {
          this.mate();
        } else {
          this.wander();
        }
        this._incrementAge();
        return this._checkSurvival();
      };

      Rabbit.prototype.makeNewborn = function() {
        var sex;
        Rabbit.__super__.makeNewborn.call(this);
        sex = model.env.agents.length && model.env.agents[model.env.agents.length - 1].species.speciesName === "rabbits" && model.env.agents[model.env.agents.length - 1].get("sex") === "female" ? "male" : "female";
        this.set('sex', sex);
        return this.set('age', Math.round(Math.random() * 5));
      };

      Rabbit.prototype.mate = function() {
        var nearest;
        nearest = this._nearestMate();
        if (nearest != null) {
          this.chase(nearest);
          if (nearest.distanceSq < Math.pow(this.get('mating distance'), 2) && ((this.species.defs.CHANCE_OF_MATING == null) || Math.random() < this.species.defs.CHANCE_OF_MATING)) {
            this.reproduce(nearest.agent);
            return this.set('max offspring', 0);
          }
        } else {
          return this.wander(this.get('speed') * Math.random() * 0.75);
        }
      };

      Rabbit.prototype.resetGeneticTraits = function() {
        Rabbit.__super__.resetGeneticTraits.call(this);
        return this.set('genome', this._genomeButtonsString());
      };

      Rabbit.prototype._genomeButtonsString = function() {
        var alleles;
        alleles = this.organism.getAlleleString().replace(/a:/g, '').replace(/b:/g, '').replace(/,/g, '');
        return alleles;
      };

      return Rabbit;

    })(BasicAnimal);
    return module.exports = new Species({
      speciesName: "rabbits",
      agentClass: Rabbit,
      geneticSpecies: biologicaSpecies,
      defs: {
        MAX_HEALTH: 1,
        MATURITY_AGE: 9,
        CHANCE_OF_MUTATION: 0,
        INFO_VIEW_SCALE: 2.5,
        INFO_VIEW_PROPERTIES: {
          "Fur color: ": 'color',
          "Genotype: ": 'genome',
          "Sex: ": 'sex'
        }
      },
      traits: [
        new Trait({
          name: 'speed',
          "default": 60
        }), new Trait({
          name: 'predator',
          "default": [
            {
              name: 'hawks'
            }, {
              name: 'foxes'
            }
          ]
        }), new Trait({
          name: 'color',
          possibleValues: [''],
          isGenetic: true,
          isNumeric: false
        }), new Trait({
          name: 'vision distance',
          "default": 200
        }), new Trait({
          name: 'mating distance',
          "default": 50
        }), new Trait({
          name: 'max offspring',
          "default": 3
        }), new Trait({
          name: 'min offspring',
          "default": 2
        }), new Trait({
          name: 'metabolism',
          "default": 0
        })
      ],
      imageRules: [
        {
          name: 'rabbit',
          contexts: ['environment', 'carry-tool'],
          rules: [
            {
              image: {
                path: "images/agents/rabbits/sandrat-light.png",
                scale: 0.3,
                anchor: {
                  x: 0.8,
                  y: 0.47
                }
              },
              useIf: function(agent) {
                return agent.get('color') === 'white';
              }
            }, {
              image: {
                path: "images/agents/rabbits/sandrat-dark.png",
                scale: 0.3,
                anchor: {
                  x: 0.8,
                  y: 0.47
                }
              },
              useIf: function(agent) {
                return agent.get('color') === 'brown';
              }
            }
          ]
        }, {
          name: 'sex',
          contexts: ['environment'],
          rules: [
            {
              image: {
                path: "images/overlays/male-stack.png",
                scale: 0.4,
                anchor: {
                  x: 0.75,
                  y: 0.5
                }
              },
              useIf: function(agent) {
                return model.showSex && agent.get('sex') === 'male';
              }
            }, {
              image: {
                path: "images/overlays/female-stack.png",
                scale: 0.4,
                anchor: {
                  x: 0.75,
                  y: 0.5
                }
              },
              useIf: function(agent) {
                return model.showSex && agent.get('sex') === 'female';
              }
            }
          ]
        }, {
          name: 'genotype',
          contexts: ['environment'],
          rules: [
            {
              image: {
                path: "images/overlays/heterozygous-stack.png",
                scale: 0.4,
                anchor: {
                  x: 0.75,
                  y: 0.5
                }
              },
              useIf: function(agent) {
                return model.showHetero && (agent.alleles.color === 'a:B,b:b' || agent.alleles.color === 'a:b,b:B');
              }
            }
          ]
        }, {
          name: 'rabbit info tool',
          contexts: ['info-tool'],
          rules: [
            {
              image: {
                path: "images/agents/rabbits/sandrat-light.png",
                scale: 0.4,
                anchor: {
                  x: 0.4,
                  y: 0.5
                }
              },
              useIf: function(agent) {
                return agent.get('color') === 'white';
              }
            }, {
              image: {
                path: "images/agents/rabbits/sandrat-dark.png",
                scale: 0.4,
                anchor: {
                  x: 0.4,
                  y: 0.5
                }
              },
              useIf: function(agent) {
                return agent.get('color') === 'brown';
              }
            }
          ]
        }
      ]
    });
  });

}).call(this);
